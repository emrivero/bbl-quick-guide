name: Publish App to Expo

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3

      - name: 🏗 Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 22.11.0
          cache: npm

      - name: Notify new build
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          VERSION=$(jq -r '.version' package.json)
          curl -X POST \
          -F "chat_id=${TELEGRAM_CHAT_ID}" \
          -F "text=¡Nueva build cocinándose! Os la enviaré cuando esté lista. Versión: ${VERSION}" \
          "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm install

      - name: 🚀 Create update & Upload Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

        run: |
          VERSION=$(jq -r '.version' package.json)
          build_json=$(eas build --profile preview --platform android --non-interactive --json --message="Build $VERSION")
          echo $build_json
          android_link=$(echo $build_json | jq -r '.[] | select(.platform=="ANDROID") | .artifacts.applicationArchiveUrl')
          curl -X POST \
          -F "chat_id=${TELEGRAM_CHAT_ID}" \
          -F "text=Descárgate la nueva versión de la app: ${android_link}" \
          "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"

      # Crear un tag basado en la versión del package.json
      - name: Create a tag for the release
        id: create_tag
        run: |
          # Leer la versión del package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "Version found: $VERSION"
          # Crear un tag con el prefijo "v"
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token integrado para autenticación con GitHub
      - name: Merge and push to develop
        id: merge_and_push_to_develop
        run: |
          git pull
          git checkout develop
          git merge master
          git push origin develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
